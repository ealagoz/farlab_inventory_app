#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose    # Compose v2 via 'docker compose' (not the old docker-compose v1)
  - git
  - ufw
  - xfsprogs

# Create groups that we will use (docker may not exist until Docker is installed)
groups:
  - docker

users:
  - default 
  - name: appuser
    groups: [docker, sudo]
    shell: /bin/bash
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - ${ssh_public_key}

# Prepare dirs very early so write_files has a place to write into
# (bootcmd runs before most modules; guarded with cloud-init-per to run once)
bootcmd:
  - [ cloud-init-per, once, mkdir_app_src,     mkdir, -p, /opt/app/source ]
  - [ cloud-init-per, once, mkdir_app_secrets, mkdir, -p, /opt/app/secrets ]
  - [ cloud-init-per, once, mkdir_pg,          mkdir, -p, /opt/postgres-data ]

write_files:
  # Compose override lives alongside the base compose in /opt/app/source
  - path: /opt/app/source/docker-compose.override.yml
    owner: "appuser:appuser"
    permissions: '0644'
    defer: true
    content: |
      version: '3.8'
      services:
        db:
          volumes:
            - /opt/postgres-data:/var/lib/postgresql/data
      volumes:
        postgres-data:
          external: false

  # .env file that Compose auto-loads from the working directory
  - path: /opt/app/.env
    owner: "appuser:appuser"
    permissions: '0600'
    defer: true
    content: |
      # Generated by cloud-init
      DB_USER=${db_user}
      DB_PASSWORD=${postgres_password}
      DB_NAME=${db_name}
      ADMIN_USER=${admin_name}
      ADMIN_EMAIL=${admin_email}
      ADMIN_PASSWORD=${admin_password}

  # Secrets file (you must reference this as env_file: in your docker-compose.yml)
  - path: /opt/app/source/secrets.env
    owner: "appuser:appuser"
    permissions: '0600'
    defer: true
    content: |
      # Generated by cloud-init
      POSTGRES_PASSWORD=${postgres_password}
      ADMIN_PASSWORD=${admin_password}
      ADMIN_EMAIL=${admin_email}
      SECRET_KEY=${secret_key}

  # Systemd unit: run Compose v2 from the source dir so .env is auto-loaded
  - path: /etc/systemd/system/inventory-app.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Inventory Application (Docker Compose)
      After=network-online.target docker.service
      Wants=network-online.target
      Requires=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/app
      User=appuser
      # Build and start in detached mode (Compose v2)
      ExecStart=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.override.yml up --build -d
      ExecStop=/usr/bin/docker compose -f docker-compose.yml -f docker-compose.override.yml down

      [Install]
      WantedBy=multi-user.target

runcmd:
  # Safe system updates (package_* already requested; keeping this is harmless)
  - apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
  - apt-get -y autoremove
  - apt-get -y autoclean

  # Docker
  - systemctl enable --now docker
  - usermod -aG docker appuser

  # Create application directory
  - mkdir -p /opt/app
  - chown -R appuser:appuser /opt/app

  # Clone the repo (using the corrected command)
  - git clone ${git_repo_url} /tmp/app-source
  - mv /tmp/app-source/* /opt/app/
  - mv /tmp/app-source/.* /opt/app/ || true
  - rm -rf /tmp/app-source
  - chown -R appuser:appuser /opt/app

  # Start the service
  - systemctl daemon-reload
  - systemctl enable --now inventory-app.service

final_message: "Server setup complete! The Application is deploying."