#cloud-config
# Corrected and Streamlined Cloud-Init for Git-based Docker Compose Deployment

# 1. System updates and package installation
package_update: true
package_upgrade: true
packages:
  - docker.io
  - git
  - ufw
  - rsync 

# 2. Create the application user and add it to the docker group
groups:
  - docker
users:
  - default
  - name: appuser
    groups: [docker, sudo]
    shell: /bin/bash
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    ssh_authorized_keys:
      - ${ssh_public_key}

# 3. Create directories needed for the application
bootcmd:
  - [ cloud-init-per, once, mkdir_app, mkdir, -p, /opt/app ]
  - [ cloud-init-per, once, mkdir_pg,  mkdir, -p, /opt/postgres-data ]

# 4. Write configuration files from Terraform variables
# Note: These are deferred to run late, ensuring directories exist and user is created.
write_files:
  # This file will be loaded by Docker Compose to override the base config
  - path: /opt/app/docker-compose.override.yml
    owner: "appuser:appuser"
    permissions: '0644'
    defer: true
    content: |
      version: '3.8'
      services:
        db:
          volumes:
            - /opt/postgres-data:/var/lib/postgresql/data
      volumes:
        postgres-data:
          external: false

  # This .env file will be automatically loaded by Docker Compose
  - path: /opt/app/.env
    owner: "appuser:appuser"
    permissions: '0600'
    content: |
      # Generated by cloud-init for the application
      DB_USER=${db_user}
      DB_PASSWORD=${postgres_password}
      DB_NAME=${db_name}
      ADMIN_USER=${admin_name}
      ADMIN_EMAIL=${admin_email}
      ADMIN_PASSWORD=${admin_password}
      SECRET_KEY=${secret_key}

  # Systemd service to manage the Docker Compose application
  - path: /etc/systemd/system/inventory-app.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Inventory Application (Docker Compose)
      After=network-online.target docker.service
      Wants=network-online.target
      Requires=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      User=appuser
      WorkingDirectory=/opt/app

      # Use the full path to the manually installed docker-compose
      ExecStart=/usr/local/bin/docker-compose up --build -d
      ExecStop=/usr/local/bin/docker-compose down

      [Install]
      WantedBy=multi-user.target

# 5. Run main setup commands
runcmd:
  # Install Docker Compose V2 manually (most reliable method)
  - |
    LATEST_COMPOSE=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep "tag_name" | cut -d'"' -f4)
    curl -L "https://github.com/docker/compose/releases/download/${LATEST_COMPOSE}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    
  # Ensure Docker is running
  - systemctl enable --now docker

  # Clone the application source code
  - git clone ${git_repo_url} /tmp/app-source
  - rsync -a /tmp/app-source/ /opt/app/
  - rm -rf /tmp/app-source
  - chown -R appuser:appuser /opt/app
  - chown -R appuser:appuser /opt/postgres-data

  # Start the application via systemd
  - systemctl daemon-reload
  - systemctl enable --now inventory-app.service

final_message: "Server setup complete! The Application is deploying."
