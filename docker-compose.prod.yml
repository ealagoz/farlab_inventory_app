services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: inventory-backend:latest

    environment:
      # Database connection settings (password will be loaded from secrets)
      - DATABASE_URL=postgresql://${DB_USER}:PLACEHOLDER@db:${DB_INTERNAL_PORT}/${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_HOST=db
      - DB_PORT=${DB_INTERNAL_PORT}
      - DB_NAME=${DB_NAME}

      # Application secrets (using secrets files for better security)
      - SECRETS_FILE=/app/secrets/secrets.txt

      # Application configuration
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - SCHEDULER_INTERVAL_MINUTES=${SCHEDULER_INTERVAL_MINUTES}
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      # - FRONTEND_URL=http://frontend:5173
      - FRONTEND_URL=http://nginx # NGINX handles routing
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1

    volumes:
      # Mount source for development hot reloading
      # Remove this for production
      - ./farlab-inventory-backend:/app:delegated
      # Mount secrets directory (make sure path is correct)
      - ./secrets:/app/secrets:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # Development command with reload - remove reload for production
    command:
      ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=5)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React/Vite service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: inventory-frontend:latest
    # Expose port for HMR WebSocket connections
    ports:
      - "5173:5173"
    environment:
      # Backend API URL that frontend will call (through nginx)
      - VITE_API_URL=http://localhost
      - NODE_ENV=development
    volumes:
      # Mount source for development hot reloading
      # - ./farlab-inventory-frontend:/app:delegated
      # Use named volume for node_modules to avoid permission issues
      # - frontend_node_modules:/app/node_modules
      # Only the shared volume for built assets
      - frontend-assets:/app/dist
    depends_on:
      - backend
    networks:
      - app-network
      # - web-network
    restart: unless-stopped
    # No command override - uses Dockerfile CMD (sleep infinity)
    # command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "5173"]
    healthcheck:
      test: ["CMD", "test", "-f", "/app/dist/index.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Database service
  db:
    image: postgres:17.2-alpine3.21 # Updated from postgres:17-alpine3.20
    volumes:
      # Persistent volume for database data
      - postgres_data:/var/lib/postgresql/data/
      # Mount secrets directory
      - ./secrets:/tmp/secrets:ro
    environment:
      # Database configuration using secrets
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      # Security settings
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    command: >
      sh -c "
        export POSTGRES_PASSWORD=$$(grep '^POSTGRES_PASSWORD=' /tmp/secrets/secrets.txt | cut -d'=' -f2 | tr -d ' \n');
        echo 'Using POSTGRES_PASSWORD from secrets file';
        exec docker-entrypoint.sh postgres
      "
    # Remove port exposure for production security
    # For development only - comment out for production
    ports:
      - "127.0.0.1:${DB_HOST_PORT}:${DB_INTERNAL_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped
    # Add resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy with security enhancements
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443" # For HTTPS support
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-assets:/usr/share/nginx/html:ro # Mount assets here
      # - ./ssl:/etc/nginx/ssl:ro # Uncomment when you have SSL certificates
    depends_on:
      - frontend # Wait for assets to be built
      - backend
    networks:
      - web-network # External access
      - app-network # Internal communication
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-nv", "-t1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Security scanner - runs vulnerability scans on images
  security-scanner:
    image: aquasec/trivy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-network
    depends_on:
      - backend
      - frontend
    profiles:
      - security # Only runs when explicitly called with --profile security
    command:
      [
        "image",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--severity",
        "HIGH,CRITICAL",
        "--no-progress",
        "inventory-backend:latest",
      ]

  # Configuration scanner for docker-compose and configs
  config-scanner:
    image: aquasec/trivy:latest
    volumes:
      - .:/workspace:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-network
    profiles:
      - security # Only runs when explicitly called
    command:
      [
        "config",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--severity",
        "HIGH,CRITICAL",
        "/workspace",
      ]

  # Secret scanner
  secret-scanner:
    image: aquasec/trivy:latest
    volumes:
      - .:/workspace:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-network
    profiles:
      - security # Only runs when explicitly called
    command:
      [
        "fs",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--security-checks",
        "secret",
        "/workspace",
      ]

# Network for inter-service communication
networks:
  app-network:
    driver: bridge
    internal: true # prevent external access
  web-network:
    driver: bridge

volumes:
  postgres_data:
  trivy-cache:
  frontend-assets:
