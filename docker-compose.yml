# -----------------------------------------------------------------------------
# Networks & volumes
# -----------------------------------------------------------------------------
networks:
  app-net:
    driver: bridge
    internal: true # Prevents direct external access to backend services
  web-net:
    driver: bridge # External network for nginx

volumes:
  frontend-assets:
  postgres-data: # Database volume
  trivy-cache: # Security scanners

# -----------------------------------------------------------------------------
# Services
# -----------------------------------------------------------------------------
services:
  # -------------------------------------------------------------
  # 1) Database
  # -------------------------------------------------------------
  db:
    # image: postgres:17.2-alpine3.21 # Original working but less secure
    image: postgres:17-alpine # Better security and maintainability
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
    # Use your existing secrets pattern
    command: >
      sh -c "
        export POSTGRES_PASSWORD=$$(grep '^POSTGRES_PASSWORD=' /tmp/secrets/secrets.txt | cut -d'=' -f2 | tr -d ' \n');
        echo 'Using POSTGRES_PASSWORD from secrets file';
        exec docker-entrypoint.sh postgres
      "
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./secrets:/tmp/secrets:ro # Secrets pattern
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    networks:
      - app-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # -------------------------------------------------------------
  # 2) Frontend build
  # -------------------------------------------------------------
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: http://localhost
    image: inventory-frontend
    command: >
      sh -c "
        echo '[frontend] Starting asset copy...';
        rm -rf /out/* || true;
        if [ -d /app/dist ]; then
          cp -a /app/dist/. /out/;
          echo '[frontend] ✅ Assets copied successfully';
          ls -la /out/;
        else
          echo '[frontend] ❌ ERROR: /app/dist not found';
          exit 1;
        fi
      "
    volumes:
      - frontend-assets:/out
    environment:
      NODE_ENV: production
      VITE_API_URL: http://localhost
    networks:
      - app-net

    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M

  # -------------------------------------------------------------
  # 3) Backend build
  # -------------------------------------------------------------
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: inventory-backend
    depends_on:
      db:
        condition: service_healthy
    # Environment pattern
    environment:
      # Database connection
      - DATABASE_URL=postgresql://${DB_USER}:PLACEHOLDER@db:${DB_INTERNAL_PORT}/${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_HOST=db
      - DB_PORT=${DB_INTERNAL_PORT}
      - DB_NAME=${DB_NAME}
      # Secrets
      - SECRETS_FILE=/app/secrets/secrets.txt
      # App config
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - SCHEDULER_INTERVAL_MINUTES=${SCHEDULER_INTERVAL_MINUTES}
      - ADMIN_FIRST_NAME=${ADMIN_FIRST_NAME}
      - ADMIN_LAST_NAME=${ADMIN_LAST_NAME}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - SMTP_USER=${SMTP_USER}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - FRONTEND_URL=http://localhost
      # Python optimization
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      # Production optimizations
      - UVICORN_WORKERS=2
      - UVICORN_LOG_LEVEL=info
      - PYTHONPATH=/app
      # Security headers
      - SECURE_HEADERS=true
    volumes:
      - ./secrets:/app/secrets:ro # Secrets pattern
    expose:
      - "8000"
    dns:
      - 8.8.8.8
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=5)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    init: true
    restart: unless-stopped
    networks:
      - app-net
    deploy:
      resources:
        limits:
          cpus: "1.00"    # Keep current - allows burst processing
          memory: 512M    # Keep current - good safety margin
        reservations:
          cpus: "0.5"     # Guaranteed half CPU
          memory: 256M    # Guaranteed minimum memory

  # -------------------------------------------------------------
  # 4) Nginx with dual networks
  # -------------------------------------------------------------
  nginx:
    image: nginx:1.27-alpine
    depends_on:
      frontend:
        condition: service_completed_successfully
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443" # For HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-assets:/usr/share/nginx/html:ro
      # SSL directory (create when ready)
      # - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: [
        "CMD", "sh", "-c", 
        "wget -nv -t1 --spider http://127.0.0.1/health && wget -nv -t1 --spider http://127.0.0.1/api/health"
      ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp # Nginx needs tmp directory
    init: true
    restart: unless-stopped
    networks:
      - web-net # External access
      - app-net # Internal communication with backend
    deploy:
      resources:
        limits:
          cpus: "0.50"    # Handle traffic spikes
          memory: 128M    # Standard for reverse proxy + static files
        reservations:      # ← Add this
          cpus: "0.25"
          memory: 64M


  # -------------------------------------------------------------
  # 5) Security scanners
  # -------------------------------------------------------------
  security-scanner:
    image: aquasec/trivy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-net
    depends_on:
      - backend
    profiles:
      - security
    deploy:
      resources:
        limits:
          cpus: "0.75"    # Allow full burst for large images
          memory: 512M    # Handle large container images
    command: [
        "image",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--severity",
        "HIGH,CRITICAL",
        "--no-progress",
        "inventory-backend", # Backend image name
      ]

  config-scanner:
    image: aquasec/trivy:latest
    volumes:
      - .:/workspace:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-net
    profiles:
      - security
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
    command:
      [
        "config",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--severity",
        "HIGH,CRITICAL",
        "/workspace",
      ]

  secret-scanner:
    image: aquasec/trivy:latest
    volumes:
      - .:/workspace:ro
      - trivy-cache:/root/.cache/
    networks:
      - app-net
    profiles:
      - security
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
    command:
      [
        "fs",
        "--format",
        "table",
        "--exit-code",
        "1",
        "--security-checks",
        "secret",
        "/workspace",
      ]
# -------------------------------------------------------------
  # 4) Backup service
  # -------------------------------------------------------------
  backup:
    image: postgres:17-alpine
    depends_on:
      - db
    volumes:
      - ./backups:/backups
      - ./secrets:/tmp/secrets:ro 
    networks:
      - app-net
    profiles:
      - backup
    environment:
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
    command: >
      sh -c "
        export PGPASSWORD=$$(grep '^POSTGRES_PASSWORD=' /tmp/secrets/secrets.txt | cut -d'=' -f2 | tr -d ' \n');
        pg_dump -h db -U ${DB_USER} -d ${DB_NAME} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        echo 'Backup completed';
      "
    deploy:
      resources:
        limits:
          cpus: "0.25"    # I/O bound, minimal CPU needed
          memory: 256M    # Buffer for database serialization